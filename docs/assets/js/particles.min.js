const pJS = function (e) {
    const a = document.querySelector("#" + e + " > .particles-js-canvas-el");
    var t = {
        canvas: { el: a, w: a.offsetWidth, h: a.offsetHeight },
        particles: {
            number: { value: 29, density: { enable: !0, value_area: 800 } },
            color: { value: "#fff" },
            shape: { type: "circle", stroke: { width: 0, color: "#000000" } },
            opacity: { value: 0.5, random: !1 },
            size: { value: 10, random: !0 },
            move: { enable: !0, speed: 12, direction: "none", random: !0, straight: !1, out_mode: "out", bounce: !1 },
            line_linked: { enable: !0, distance: 300, color: "#ff9800", opacity: 0.4, width: 2 },
            array: []
        },
        fps_limit: 60,
        interactivity: {
            detect_on: "canvas",
            events: {
                onhover: { enable: !1 },  // ❌ Desactiva la interacción con el mouse
                onclick: { enable: !1 },  // ❌ No responde a clics
                resize: !0
            },
            modes: {}
        },
        retina_detect: !1,
        fn: { interact: {}, modes: {}, vendors: {} },
        tmp: {}
    };

    t.fn.retinaInit = function () {
        t.canvas.w = t.canvas.el.offsetWidth;
        t.canvas.h = t.canvas.el.offsetHeight;
    };

    t.fn.canvasInit = function () {
        t.canvas.ctx = t.canvas.el.getContext("2d");
    };

    t.fn.canvasSize = function () {
        t.canvas.el.width = t.canvas.w;
        t.canvas.el.height = t.canvas.h;
    };

    t.fn.particle = function (e) {
        this.radius = (t.particles.size.random ? Math.random() : 1) * t.particles.size.value;
        this.x = Math.random() * t.canvas.w;
        this.y = Math.random() * t.canvas.h;
        this.color = e;
        this.opacity = t.particles.opacity.value;
        this.shape = t.particles.shape.type;
    };

    t.fn.particle.prototype.draw = function () {
        var e = this, n = "rgba(" + e.color.value + "," + e.opacity + ")";
        t.canvas.ctx.fillStyle = n;
        t.canvas.ctx.beginPath();
        t.canvas.ctx.arc(e.x, e.y, e.radius, 0, 2 * Math.PI, !1);
        t.canvas.ctx.closePath();
        t.canvas.ctx.fill();
    };

    t.fn.particlesCreate = function () {
        for (var e = 0; e < t.particles.number.value; e++) {
            t.particles.array.push(new t.fn.particle(t.particles.color));
        }
    };

    t.fn.particlesUpdate = function () {
        for (var e = 0; e < t.particles.array.length; e++) {
            var a = t.particles.array[e];
            if (t.particles.move.enable) {
                var i = t.particles.move.speed / 2;
                a.x += Math.random() * i - i / 2;
                a.y += Math.random() * i - i / 2;
            }
        }
    };

    t.fn.particlesDraw = function () {
        t.canvas.ctx.clearRect(0, 0, t.canvas.w, t.canvas.h);
        t.fn.particlesUpdate();
        for (var e = 0; e < t.particles.array.length; e++) {
            t.particles.array[e].draw();
        }
    };

    t.fn.vendors.draw = function () {
        requestAnimationFrame(t.fn.vendors.draw);
        t.fn.particlesDraw();
    };

    t.fn.vendors.init = function () {
        t.fn.retinaInit();
        t.fn.canvasInit();
        t.fn.canvasSize();
        t.fn.particlesCreate();
    };

    t.fn.vendors.start = function () {
        t.fn.vendors.init();
        t.fn.vendors.draw();
    };

    t.fn.vendors.start();
};

window.particlesJS = function (e) {
    document.getElementById(e).getElementsByClassName("a");
    var a = document.createElement("canvas");
    a.style.width = "100%";
    a.style.height = "100%";
    a.style.position = "absolute";
    a.style.top = "0px";
    document.getElementById(e).appendChild(a) !== null && new pJS(e);
};

window.particlesJS.load = function (e) {
    setTimeout(() => { window.particlesJS(e); }, 0);
};
